fn rot_word(x: &mut [u8]) {
    x.rotate_left(1);
}

static SUB_TABLE: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

fn sub_word(xs: &mut [u8]) {
    for x in xs {
        *x = SUB_TABLE[*x as usize];
    }
}

static RCON_TABLE: [u8; 256] = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
];

fn rcon(x: u8) -> [u8; 4] {
    [RCON_TABLE[x as usize], 0x00, 0x00, 0x00]
}

// Compute the rcon function using math
// The current implementation iteratively multiplies by x and then takes modulos as necessary.
// There could be a faster version but this may be pointless since the lookup table is always gonna
// be faster
fn rcon_math(x: u8) -> u8 {
    if x == 0 {
        return 0x8d;
    }

    let mut p = 1;

    for _ in 1..x {
        if p < 0x80 {
            p <<= 1;
        } else {
            p <<= 1;
            p ^= 0x1b;
        }
    }

    p
}

// compute 4 new bytes for a key
fn key_expansion(keys: &mut Vec<u8>, round: u8) {
    keys.extend_from_within(keys.len() - 4..);

    let l = keys.len();

    let (key_data, new_key) = keys.split_at_mut(l - 4);
    let k = key_data.len();

    rot_word(new_key);
    sub_word(new_key);

    for i in 0..4 {
        new_key[i] ^= key_data[k - 16 + i];
    }

    let rcon = rcon(round);

    for i in 0..4 {
        new_key[i] ^= rcon[i];
    }
}

fn compute_round_key(keys: &mut Vec<u8>, round: u8) {
    let l = keys.len();
    key_expansion(keys, round);
    for i in 0..12 {
        keys.push(keys[l - 12 + i] ^ keys[l + i]);
    }
}

#[cfg(test)]
mod tests {
    use crate::{
        aes::{rcon_math, rot_word, sub_word, RCON_TABLE},
        util::read_hex,
    };

    use super::compute_round_key;

    #[test]
    fn can_rotate() {
        let mut xs = [
            0x0u32.to_be_bytes(),
            0x1u32.to_be_bytes(),
            0xffu32.to_be_bytes(),
            0xffff0000u32.to_be_bytes(),
            0xabcdef89u32.to_be_bytes(),
            0x1b4a89cdu32.to_be_bytes(),
            0x9CB62B90u32.to_be_bytes(),
            0x5F2549B8u32.to_be_bytes(),
        ];
        let ys = [
            0x0u32.to_be_bytes(),
            0x00000100u32.to_be_bytes(),
            0x0000ff00u32.to_be_bytes(),
            0x00ffff00u32.to_be_bytes(),
            0x89abcdefu32.to_be_bytes(),
            0xcd1b4a89u32.to_be_bytes(),
            0x909cb62bu32.to_be_bytes(),
            0xb85f2549u32.to_be_bytes(),
        ];

        for x in &mut xs {
            rot_word(x);
        }

        assert_eq!(xs, ys);
    }

    #[test]
    fn can_subword() {
        let mut xs = [
            0x0u32.to_be_bytes(),
            0x1u32.to_be_bytes(),
            0xffffffffu32.to_be_bytes(),
            0xabcdef89u32.to_be_bytes(),
        ];
        let ys = [
            0x63636363u32.to_be_bytes(),
            0x6363637cu32.to_be_bytes(),
            0x16161616u32.to_be_bytes(),
            0x62bddfa7u32.to_be_bytes(),
        ];

        for x in &mut xs {
            sub_word(x);
        }

        assert_eq!(xs, ys);
    }

    #[test]
    fn can_compute_rcon() {
        for i in 0u8..=255 {
            println!("{i}: {:x} == {:x}", rcon_math(i), RCON_TABLE[i as usize]);
            assert_eq!(rcon_math(i), RCON_TABLE[i as usize]);
        }
    }

    #[test]
    fn can_expand_key() {
        let mut keys = read_hex("2b7e151628aed2a6abf7158809cf4f3c").unwrap();

        for i in 1..11 {
            compute_round_key(&mut keys, i);
        }

        println!("{:x?}", keys);

        assert!(true);
    }
}
